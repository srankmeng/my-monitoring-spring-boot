opentelemetry-collector:
  mode: deployment
  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "0.102.1"
  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint:
          http: 
            endpoint:
      prometheus/collector:
        config:
          scrape_configs:
            # - job_name: 'opentelemetry-collector'
            #   static_configs:
            #     - targets: ['localhost:8888']


            - job_name: 'postgres_exporter'
              metrics_path: '/metrics'
              scrape_interval: 3s # This can be adjusted based on our needs
              static_configs:
                - targets: ['postgres-exporter-prometheus-postgres-exporter']
                  labels:
                    application: 'postgres'
            - job_name: 'user_application'
              metrics_path: '/actuator/prometheus'
              scrape_interval: 3s # This can be adjusted based on our needs
              static_configs:
                - targets: ['user-service.default.svc.cluster.local:8080']
                  labels:
                    application: 'user_api'


    processors:
      batch: {}
    exporters:
      otlphttp/metrics:
        endpoint: http://prometheus-server/api/v1/otlp
      # prometheusremotewrite:
      #   endpoint: http://prometheus-server/api/v1/write
      otlphttp/traces:
        endpoint: http://tempo:4318
      otlphttp/logs:
        endpoint: http://loki:3100/otlp
      logging:
        verbosity: detailed
    service:
      pipelines:
        metrics:
          receivers: [otlp,prometheus/collector]
          processors: [batch]
          exporters: [otlphttp/metrics]
          # exporters: [prometheusremotewrite]
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlphttp/traces]
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlphttp/logs]
      
          
          